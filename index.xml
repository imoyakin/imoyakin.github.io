<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>笔记</title>
    <link>https://blog.toko.moe/</link>
    <description>Recent content on 笔记</description>
    <image>
      <url>https://blog.toko.moe/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.toko.moe/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 28 Dec 2022 11:21:05 +0800</lastBuildDate><atom:link href="https://blog.toko.moe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Telepresence踩坑</title>
      <link>https://blog.toko.moe/posts/telepresence%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Wed, 28 Dec 2022 11:21:05 +0800</pubDate>
      
      <guid>https://blog.toko.moe/posts/telepresence%E8%B8%A9%E5%9D%91/</guid>
      <description>telepresence 踩坑 telepresence 用法  k8s pod IP 由 CNI 分配, 通信是走 overlay 网络, 容器之间的通信都是基于cluser IP.[1]
 k8s的软件调试出了名的难搞,如果遇到日志设计不合理/不熟悉的代码,能打断点总是.没错,这就是我使用telepresence点初衷&amp;ndash; telepresence可以让本机接入k8s的overlay网络的同时,通过sidecar的方式拦截具体pod的流量转发到执行intercept的本地环境.
troublneshooting  无法建立和k8s内容器的链接/dns解析容器内部域名·失败
调试环境建立起来后,简单测试: curl -ik https://kubernetes.default, 返回一串json,表明成功解析了k8s的域名. 调试程序时,我执行curl去访问etcd.dev.svc.cluster.local这样自己搭建的资源时,却报错无法解析相应的dns,同时发现nslookup也无法解析.  在我的使用环境archlinux下,telepresence想要将k8s上服务的流量拦截到用户本机上,需要建立一个名为tel0的tun设备,这样本机就可以请求到k8s中服务的ip.但是光能链接ip不行,还需要让k8s内部的dns服务提供给用户的开发机,只有这样用户调试的软件才能和k8s集群内其他服务互通有无.
但是这里遇到的一个问题: /etc/resolv.conf不归属用户.我甚至使用sudo的权限删除了这个文件,但是还是被软件立马创建了出来.在一些文章中,这种情况被描述为一些服务把持着这个文件,阻止用户删除,甚至出现了数款服务互相争夺dns控制权互相覆写乃至于出现了dns中断的情况. 我的情况稍微简单,cat /etc/resolv.conf,观察到这样的内容:
# Generated by dhcpcd from ens33.dhcp # /etc/resolv.conf.head can replace this line domain AirDream nameserver 114.114.114.114 # /etc/resolv.conf.tail can replace this line 文件描述其被dhcpcd生成,查询资料,可以通过修改配置解除自动的文件生成. 即: 在/etc/dhcpcd.conf中添加nohook resolv.conf配置. 如果文件没有描述其被哪个文件生成,那就要辛辛苦苦的去排查了. 然后执行  ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf,让systemd-resolved生效. 如果 /run/systemd/resolve/stub-resolv.conf 之前被dhcp服务修改了,重启systemd—resolved就行.</description>
    </item>
    
    <item>
      <title>Rust Pin Unpin</title>
      <link>https://blog.toko.moe/posts/rust-pin-unpin/</link>
      <pubDate>Sat, 31 Oct 2020 10:03:02 +0800</pubDate>
      
      <guid>https://blog.toko.moe/posts/rust-pin-unpin/</guid>
      <description>rust的Pin指针 pin指针是一个在销毁前永远不会移动的指针。配合该指针可以更让结构体中包含指向它自己内存的指针&amp;ndash;因为移动了后结构体中的这个指针就会变成悬垂引用，这就与rust安全的设计相冲突。也就是说，声明pin指针就是创建一个在生命周期结束前不会被移动的内存。
为什么需要Pin指针 rfc中明确的概念是，提了一个使用futures(async/await)的例子：正在poll的future结构体，希望其能保存指向自己的引用。事实上我并没有明白其想表达的意思，但结合其他博文, 大致明白了需求的具体背景情形。
 实现async/await函数时，由于需要记录当前所处的状态(每次await的时候都会导致一个状态)，所以编译器往往生成的是一个匿名的enum，每个enum变体保存从外部或者之前的await点捕获的变量。
 在这篇文章的例子中，提到了await前的会被从stack中清理，await后能调用到被清理的数据是因为这些数据保存在了编译器生成的匿名enum，其充当了虚拟栈。如果await前有一个变量v，再有一个引用变量v的rv，那么这俩都会保存在这个匿名enum中，即这个enum发生了自引用的情景，也是pin指针要发挥作用的情景。
题外？为什么是pin指针？ rfc中提到了解决自引用的另外有趣的办法。他们想设计一个名为move或?move的trait，只有实现这个trait的类型才有搬家的权力或者被禁止搬家。但是他们认为会带来使得一些API无法向后兼容的改变，或者或者因为过于灵活带来隐患。但这些个人认为或许在语言发展到一定程度后才能看出那个更优，而现在则感觉rust会加入太多的指针（丢人的表示写了后面忘了前面，预定一个指针总结笔记）,所以毒奶一口会在rust2中回归（x
参考资料:
 Pin概念解析 rust rfc 2349 The Why, What, and How of Pinning in Rust //需要复习  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.toko.moe/posts/clash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.toko.moe/posts/clash/</guid>
      <description>route add default gw 192.168.1.105 ens192</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.toko.moe/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%BC%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.toko.moe/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BB%BC%E8%BF%B0/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
